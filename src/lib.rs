#![deny(clippy::pedantic)]
#![deny(clippy::cargo)]
#![deny(clippy::nursery)]

fn get_alpha_vantage_client() -> alpha_vantage::api::ApiClient {
    let api_key = &std::env::var("HLEDGER_GET_MARKET_PRICES_API_KEY").unwrap_or_else(|error| {
        match error {
            std::env::VarError::NotPresent => eprintln!("Environment variable HLEDGER_GET_MARKET_PRICES_API_KEY is not set.\nPlease set this variable to your Alpha Vantage API key and try again."),
            std::env::VarError::NotUnicode(_) => eprintln!("Environment variable HLEDGER_GET_MARKET_PRICES_API_KEY is not set.\nPlease recheck whether this variable is indeed set to your API key.")
        }

        std::process::exit(1);
    });

    let user_agent_for_http_requests = concat!(
        env!("CARGO_PKG_NAME"),
        " V",
        env!("CARGO_PKG_VERSION"),
        " (",
        env!("CARGO_PKG_REPOSITORY"),
        ")"
    );

    let reqwest_client = reqwest::Client::builder()
        .user_agent(user_agent_for_http_requests)
        .build()
        .unwrap_or_else(|error| report_application_bug("Could not build reqwest client", error));

    alpha_vantage::set_api(api_key, reqwest_client)
}

fn report_application_bug<E: std::error::Error>(error_string: &str, error: E) -> ! {
    eprintln!("An unexpected problem occured that the application can't recover from.\n\nDetails about the error are below. If you believe the invocation of hledger-get-market-prices is correct, I'd appreciate a bug report at {}/issues/new.\n\nError message: {}\nError: {:?}", env!("CARGO_PKG_REPOSITORY"), error_string, error);

    std::process::exit(1);
}

pub async fn search_stock_symbol(search_query: String) {
    let search = get_alpha_vantage_client()
        .search(&search_query)
        .json()
        .await
        .unwrap_or_else(|error| {
            report_application_bug("alpha_vantage returned error during `search`: {:?}", error)
        });
    let results = search.result();
    println!("{:>20} | {:>9} – {:20}", "Region", "Symbol", "Name");
    println!("");
    for result in results {
        println!(
            "{:>20} | {:>9} – {:20}",
            result.region(),
            result.symbol(),
            result.name()
        );
    }
}

pub async fn get_history_for_stock(
    stock_symbol: String,
    stock_commodity_name: String,
    currency_commodity_name: String,
    separator: char,
    decimal_digits: Option<usize>,
) {
    let stock_name = stock_commodity_name;
    let search = get_alpha_vantage_client()
        .stock_time(
            alpha_vantage::stock_time::StockFunction::Daily,
            &stock_symbol,
        )
        .output_size(alpha_vantage::api::OutputSize::Full)
        .json()
        .await
        .unwrap_or_else(|error| {
            report_application_bug("alpha_vantage returned error during `stock_time`", error)
        });

    let mut entries = search.entry().clone();

    entries.sort_by(|a, b| a.time().cmp(b.time()).reverse());

    let mut last_datetime: Option<String> = None;
    for entry in entries.iter() {
        let current_datetime = entry.time();
        if let Some(last_datetime) = last_datetime {
            assert!(*last_datetime > *current_datetime);
        }
        last_datetime = Some(current_datetime.to_string());
    }

    println!(
        "; Generated by {}",
        concat!(env!("CARGO_PKG_NAME"), " V", env!("CARGO_PKG_VERSION"))
    );
    for entry in entries.iter() {
        let current_datetime = entry.time();
        let price = entry.close();
        let mut price_string: String = decimal_digits
            .map_or(format!("{}", price), |decimal_digits| {
                format!("{:.*}", decimal_digits, price)
            });

        if separator != '.' {
            price_string = price_string.replace('.', &separator.to_string());
        }

        println!(
            "P {} {} {} {}",
            current_datetime, stock_name, price_string, currency_commodity_name
        );
    }
}
